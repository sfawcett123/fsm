name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test with pytest
      run: |
        python -m pytest --ctrf ctrf-report.json

    - name: Publish Test Summary Results
      run: npx github-actions-ctrf ctrf-report.json

  release:
    runs-on: ubuntu-latest
    needs: [check , test ]
    steps:

    - uses: actions/checkout@v4

    - name: Build Python Module
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m build

    - name: Get Version
      run: echo "::set-output name=version::$(python ./bin/version)"
      id: version

    - name: Get Release
      uses: f2calv/gha-check-release-exists@v2
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ReleaseName: "Release ${{ steps.version.outputs.version }}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ steps.version.outputs.version }}"
        release_name: "Release ${{ steps.version.outputs.version }}"
        draft: false
        prerelease: false
      if: steps.check-release-exists.outputs.ReleaseExists == 'false'

    - name: upload release artifact
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/manager-${{ steps.create_release.outputs.upload_url }}.tar.gz
          asset_name: manager-${{ steps.create_release.outputs.upload_url }}.tar.gz
          asset_content_type: application/gzip
      if: steps.check-release-exists.outputs.ReleaseExists == 'false'
